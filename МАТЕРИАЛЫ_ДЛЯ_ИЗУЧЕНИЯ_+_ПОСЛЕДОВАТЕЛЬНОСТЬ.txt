Теоретические моменты рекомендую ставить в x2 или в x1.5 скорость - на YouTube есть такая настройка (основной акцент на практике)

Весь процесс учебы построен следующим образом 

- вы смотрите ЮТУБ видео и повторяете за учителем (легко до определенного уровня - моментальный результат)
- вы читаете литературу и пытаетесь понять что там написано (сложно, важно и является вашим конкурентам преимуществом перед теми, кто делает только шаг выше - вложения времени окупаются в долгосрок)
- вы решаете алгоритмические задачи (сложно, важно и является вашим конкурентам преимуществом перед теми, кто делает только два шага выше - вложения времени окупаются в долгосрок)

ВАЖНО: если вы чувствуете что "все", крыша едет, то помните - максимальная пауза в отдыхе 1-2 дня. Пожалуйста, берите паузы только в том случае если вам реально тяжко: желательно делать это не чаще чем раз в две недели.

Если вы столкнулись с какими-то трудностями при изучении, это нормально - гуглите решение самостоятельно:
- основные источники решений - YouTube
- StackOverFlow
- нейросети вначале не используйте ВООБЩЕ, до определенного момента не используйте их, это важно для обучения
- нейросети это инструмент для упрощения работы опытного либо хоть немного опытного разработчика, в процессе обучения я настоятельно запрещаю вам пользоваться нейросетями до определенного момента

Повторяю - если вы столкнулись с какими-то трудностями при изучении - это нормально

- когда вы устроитесь на работу, ничего не поменяется, разве что решать эти трудности придется быстрее: именно за это вам будут платить деньги. 

Все решения уже давно есть и они в открытом доступе, также как и абсолютно все учебные материалы, ваша задача освоить крепкую базу, выучить языковую модель, ее актуальные рыночные инструменты и, используя инструкции для компьютера (языки программирования) - обеспечивать беспрерывную и качественную работу интерфейсов надежных, крупных и стабильных компаний, а порой, особенно вначале карьеры - некрупных, но стабильных и надежных

Ваш профессионализм появится не сразу: забудьте про быстрый результат, только ежедневная практика, труд и вдалбливание в голову того факта, что лишь продолжая во что бы то ни стало - вы 100% устроитесь на работу frontend разработчиком, только 100% уверенность, никаких соплей и эмоций и четкое соблюдение плана даст вам результат

ПОЕХАЛИ.

1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)
1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)
					HTML!
1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)
1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)1)

Хороший HTML - изучаем максимум неделю, больше времени на это не тратить.
Каждый день рекомендуется уделять изучению от 1 часа - верхняя планка времени не ограничена, если изучаете материал быстрее положенного срока, переходите к следующему разделу - если вы не успели изучить все материалы ниже, но уже готовы переходить к следующему разделу - не спешите: помните, последовательность обучения на каждом этапе и его полноценное понимание - залог качества всей программы.

В первую неделю вы изучаете самые основы web программирования - без хорошего практического понимания данной темы переходить к другим нельзя.

Чтобы начать изучать материал, нужно просто скопировать ссылку на ЮТУБ ролик и вставить ее в браузер. Далее отсмотреть ролик от начала и до конца, не перематывая, максимум, увеличивая скорость - и повторить все то что говорит автор в видео.

Вперед.

- если знаете английский язык
1) https://www.youtube.com/watch?v=HD13eq_Pmp8

- если не знаете английский язык
1) https://www.youtube.com/watch?v=4jYYHaTwWvY&t=974s
2) https://www.youtube.com/watch?v=W4MIiV4nZDY 
(35:31 - если вдруг у вас не получается момент на этом времени в видео выше - внизу есть пункт 3)

3) о расширении live server для vsCode
- https://www.youtube.com/watch?v=I2PlgSGT2Ls - просто повторяем то что на видео, не смущайтесь английскому превью
- https://www.youtube.com/shorts/Eav6jOTYYqQ - тот же принцип что и выше
4) https://www.youtube.com/playlist?list=PLDyJYA6aTY1nlkG0gBj96XDmDSC4Fy1TO
5) https://www.youtube.com/playlist?list=PL0MUAHwery4ot0KmgGxlBSB7rXssLeA6h

6) https://www.youtube.com/watch?v=VeVhtRKC1fg - с субтитрами - видео достаточно короткое - про семантику - на английском языке: используйте Google Translate - просто возьмите и сделайте это - переведите то что в видео: работы на 10-15 минут

К чему я это? Каждый день выписывайте глаголы на английском языке, узнавайте как их произносить и тупо зубрите их. Get, set, make - глаголы используются в наименовании функций и методов объекта (это только один из примеров) - после того как вызубрите глаголы, зубрите существительные и комбинируйте их с глаголами - access, user, userName, 

В итоге getAccess - получить доступ, setPasswordParams - установить параметры пароля - и так далее - уделяйте этому вопросу пять-десять минут КАЖДЫЙ ДЕНЬ хотя бы два месяца

Также в рамках этой недели посмотрите видео ниже - его можно прослушать по пути на работу или в машине - кодить не надо в нем
https://www.youtube.com/watch?v=5vsfYifNqzk&t=90s - о важности наименования переменных в программировании

Домашнее задание: (входит в бонусы) 

Сделать статичный сайт - макет берем отсюда https://verstaem.online/projects/ - и наполнить его содержимым

Не использовать стили. 

ВАЖНО! У сайта должно быть меню, в меню должно быть несколько пунктов, в каждый из которых можно перейти
ВАЖНО! Эмблема, меню и блок с содержимым должно оставаться одинаковыми при переходе на любую страницу
ВАЖНО! Использовать вставку картинок, теги заголовков, выравнивания, таблиц, списков, абзацев и как можно больше html тегов

В результате должна быть усовершенствованная версия - как в видео - первое ДЗ

МОЖНО: сделать таблицами, дивами, семантикой - без разницы

ПОЙМИТЕ: раньше программистам платили за знание HTML - это база: не игнорируйте основы, станьте мастером HTML за неделю и только потом идите дальше.

ЗАДАЧА: понять руками через IDE и код что для написания простого сайта достаточно лишь HTML, но так как информация растет, планета крутится, "лавеха" мутится, такой подход уже не актуален, поэтому переходим дальше.

2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)
2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)
					CSS!
2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)
2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)

Минимум 1 месяц на css. От 2 часов в день минимум. Да, это много, но только так и никак иначе.

Видео не перематываем - вам кажется все понятным? Возьмите и напишите в коде то что говорит учитель, даже если вы думаете что все понятно - просто берите и пишите код, повторяйте за учителем из видео. 

Когда я говорю - 1час - 2часа - это означает что вы ставите таймер и ровно по истечению "чистых" двух часов, когда вы отзанимались два часа и только, засчитываете время.
 Если вы отошли покушать, отвлеклись - это время не учитывается. Учитывается только чистое время - не обманывайте самих себя: представьте что вы решили изучить иностранный язык... допустим вам дали систему, вам дали указания, но вы не отрабатываете нужное количество часов - вас просто не понимают

Также и в программировании - пока вы не отработайте нужное количество часов по этой системе - вы не научитесь понимать тот код, который нужно понимать, чтобы вам платили деньги - вы учитесь разговаривать с компьютером. Не надо плакать и ныть что это сложно - никто не даст вам деньги за просто так,
 хватит жить в сказке и начинайте уже отрабатывать по системе, а не искать отговорки.

60 часов чистыми.

Да, кажется что это очень много времени, но просто поймите - что чем позже вы устроитесь на работу в случае мощной учебной базы, тем лучше и вот почему: если вы попадете в слабую контору, вы сразу же сделаете все что от вас требуют и будете параллельно искать работу в более сильной конторе,
 если попадете в нормальное место - то выживите на первой работе, выкачаете оттуда весь опыт, а когда почувствуете, что развитие остановилось, начнете активно искать работу параллельно продолжая трудиться в старом месте - чтобы это было проще - в наглую просите повышение ЗП
, если вам не идут навстречу и вы не находите работу программистом через месяц, увольняйтесь: практика показывает, что только так вы "магическом" образом найдете вторую работу где может быть и не будет больших денег, где может быть будут платить меньше,
 но где точно будет новый опыт и знания, которые в один прекрасный момент предоставят вам "золотую" вилку и вот тогда вы начнете работать по полной, потому что наконец-то платят нормальные деньги,
 тогда-то вы начнете ценить те учебные часы, которые вложили вначале, потому что вырастет ваша ответственность и начнутся задачи нового уровня.

Для кого-то текст выше вода, для кого-то нет: продолжаем.

Посмотрите видео - https://www.youtube.com/watch?v=JlTQujO6cbA - это важная теория

Если вам пока непонятно - ничего страшного - посмотрите мое видео из бонусов (клиент серверное взаимодействие), где я попытался объяснить все тоже самое но другим языком

1) https://www.youtube.com/playlist?list=PL0MUAHwery4o9I7QQVj_RP4ZVpmdx6evz

Сразу после Видео 12 из пункта выше - flexBox - смотрим видео - https://www.youtube.com/watch?v=eVZEwEQg4pg&t=1s

Далее продолжаем смотреть плейлист и делать то что говорит учитель

Сразу после Видео 15 - grid - https://www.youtube.com/watch?v=MEOR2b69Pl4&t=249s

Далее продолжаем смотреть плейлист и делать то что говорит учитель

2) https://www.youtube.com/watch?v=4YRG6cMAASI&t=42s

Видео выше для тех кто подумал что после первого пункта стал css мастером. Смотрим видео выше, запоминаем, конспектируем, и двигаемся дальше.

3) https://www.youtube.com/playlist?list=PL0MUAHwery4ojFkcq8PD-6ylUalMGqXfs

4) https://www.youtube.com/playlist?list=PL0MUAHwery4rqkzKF1mDBCIH_eZgjY6uN

Если возникли сложности с материалом выше пробуем учителя ниже (темп ниже там)

- https://www.youtube.com/playlist?list=PLMB6wLyKp7lW8plyS_VDlVOt0vphrMl0A

Домашнее задания: (входит в бонусы)

Сверстать макеты из папки - Домашние задания по css

https://verstaem.online/projects/ - также сверстать два-три макеты из ссылки слева

Все css проекты сделать адаптивными и кроссбраузерными

3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)
3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)
					ОСНОВЫ CMD!
3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)
3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)3)

На этот материал уделяем максимум 5 часов - этого времени хватит с головой чтобы изучить материалы ниже.

Срок 3 дня максимум, желательно быстрее - а именно за один день, "наскоком", чтобы не тянуть

ВАЖНО: терминалом мы будем пользоваться в будущем, чтобы не запускать проекты и фрэймворки из-под node js через терминалы ваших IDE, чтобы не тратить всю оперативную память вашей машины и не дай бог, ловить глюки и не двигающуюся мышку, а это вполне возможно если у вас запущено два-три проекта через IDE (так может быть и на одной работе, а что будет если у вас их будет несколько?)

если запускать полноценные фронт проекты в будущем через терминал и если это увидит кто-то из разработчиков, это моментально выделяет вас лучшим образом для опытных программистов - в целом, базовые навыки работы с командной строкой очень-очень важны! ОЧЕНЬ ВАЖНЫ!

- для самых новичков - https://www.youtube.com/watch?v=oacg9vgiPPc
- после первого видео - https://www.youtube.com/watch?v=i_7PC_ap_BA
- для тех у кого макбук - https://www.youtube.com/watch?v=PMopSb1fxuw

Программа для винды удобная - https://conemu.github.io/ru/
Программа для мака удобная - https://www.youtube.com/watch?v=CF1tMjvHDRA&t=91s - видео на английском (в целом не обязательно работать на красивом терминале, на маке он итак годный, однако, на красивом все-таки приятнее - сложно было найти аналогичное видео на русском языке, по этому видео 100% все отрабатывает, поэтому, не слушаем что он там говорит, а просто повторяем по инструкции те шаги, которые еще не успели выполнить - если у вас мак и вы хотите красивый терминал)

ДОМАШНЕЕ ЗАДАНИЕ: (входит в бонусы)

1) Научиться с легкостью переходить из папки и назад, смотреть что находится в директории, создавать файлы, директории, удалять файлы и директории

2) просто чтобы быть в курсе "юмора" - зайти в редактор кода vim и выйти из него

3) https://www.youtube.com/watch?v=Nk69dOG4gZw - посмотреть обязательно для общего развития

4) Найти в интернете ответ, как прописывать "кастомные" (те, которые вы придумали сами) команды в терминале, например если ваш проект находится очень далеко в плане директорий, научитесь с помощью одной команды в терминале переходить к нему - если не получилось, просто знайте, что так можно: вернетесь к этому вопросу когда получится

4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)
4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)
					GIT!
4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)
4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)

На материал ниже тратим максимум 10 часов - срок одна неделя максимум.

- GIT

0) https://www.youtube.com/watch?v=LHuott_frOA&list=PLuY6eeDuleIMtvOvJBAbakwcIdEt7IAXT&index=2 - установка гит на винду (если не получилось - пробуем способ ниже)
1) https://www.youtube.com/watch?v=GsG5roSGha0 - установка гит на винду (если не получилось - пробуем способ ниже)
2) https://www.youtube.com/watch?v=iYkLrXobBbA - установка гит на винду (просто повторить за автором, можно даже не понимать что он говорит)
3) https://www.youtube.com/watch?v=XuFaQSW79rM - немного теории и правда про необходимые знания в гите для работы
4) https://www.youtube.com/watch?v=VJm_AjiTEEc&t=1683s

Домашнее задание (входит в бонусы)
- аккаунт на гите сделать - https://github.com/
- попробовать склонировать репозиторий выше либо на другой компьютер, либо на свой, куда-нибудь в другую директорию относительно тех файлов, что у вас остались
- дальнейшее изучение программирования структурировать по образцу из видео - https://www.youtube.com/watch?v=KwpZqgdpsa8
- сделать аналогию моих 1_year_learning из тех материалов, которые вы успели отработать выше

4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)
4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)
					UI БИБЛИОТЕКИ (BOOTSTRAP) И НЕЙРО-СЕТИ!
4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)
4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)4)

На этот материал тратим ровно два дня - не больше.

- ui библиотеки (bootstrap)
https://www.youtube.com/playlist?list=PLuY6eeDuleINmJ4DV22gtPL4--HQ49Df3 - до 10 урока, дальше не изучать - если вы хорошо изучили css из предыдущих видео, после изучения материала выше ответьте на следующий вопрос - можно ли сделать свою UI библиотеку? Подумайте - а потом почитайте статьи в интернете на эту тему: скорее всего будет непонятно - пытайтесь вникнуть. Не получается? Это нормально.

Получается? Хорошо. В любом случае - идем дальше.

- нейросети 
- на начальном этапе, пока не прошли все этапы обучения не используем нейросети от слова "совсем"

ВАЖНЫЙ МОМЕНТ: если у вас сложности с chatGPT - вы можете пользоваться бесплатной нейросетью perplexity

5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)
5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)
					ОСНОВЫ JS.
5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)
5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)5)

Ну вот и начинается самое веселое: читаем внимательно строчку ниже

- максимальное количество времени, которое только можно уделить, вы уделяете изучению тем ниже

Чтобы были какие-то конкретные сроки - до "недели АДА" (раздел далее) - вы изучаете JS в течении месяца

- желательно стремиться к 3 часам в день в среднем, естественно - чистыми. Я не знаю как вы это сделаете, но я знаю что если вы это сделаете, то победа неизбежна и все что будет отделять вас от нее это где****я первая работа. Месяц вы учите JS как не в себя, как будто от этого зависит ваша жизнь, а именно от этого она и зависит раз вы на этом курсе. Это переломный бл*** момент. Учитесь и двигайтесь дальше как танк иначе застрянете - начинается более сложный функционал, дальше будет только сложнее, но я напоминаю, в перспективе вас ждет удаленная работа и хорошие деньги, так что поехали.

- основы основ JS

https://www.youtube.com/watch?v=fcMcf_4PjfI - ваша задача повторить это видео от начала и до конца

Параллельно чтение и практика от 1 раздела сайта по ссылке ниже и до последнего
https://learn.javascript.ru/ - минимум 15-30 минут в день

Далее - стягиваете через git себе на комп данные из репозитория ниже

https://github.com/bradtraversy/50projects50days/tree/c92b0bc3a87fc95d44b89552b7b6a2eeb36ca481?tab=readme-ov-file - здесь связки js и css

Все проекты которые вы увидите в этой папке - сделаны только с помощью css, js, html - вам нужно научиться делать также

https://www.youtube.com/playlist?list=PLlwtdxQXoJAtV52YQ4wZIqEg4-Q0vIgzh - весь плейлист от начала и до конца
https://www.youtube.com/playlist?list=PLqKQF2ojwm3l4oPjsB9chrJmlhZ-zOzWT - весь плейлист от начала и до конца

https://www.youtube.com/watch?v=377qAu37OTE - здесь микс из js css html - просто повторяете за автором видео - ставьте скорость на два, чтобы делать это быстрее - тем более автор индус - как вариант можно поискать русскоязычный аналог данного курса, но я пока не нашел

Весь материал из видео выше (где автор индус - повторять необязательно - ваша задача научиться понимать такие материалы, чтобы при открытии любого видео из того плэйлиста - у вас не возникала каша в голове, а возникало ощущение - что все оказывается просто и легко повторить)

Справочные материалы
https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference
https://doka.guide/js/

Также справочные материалы есть в книгах, которые я предоставил в бонусах

ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ
ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ
ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ

(Примерно прошло 2 месяца и 10 дней)

ЕСЛИ ВЫ ОТРАБОТАЛИ ХОТЯ БЫ 140 часов, значит вы уже успели пройти все то что я перечислил выше по JS, CSS, GIT, CMD. Теперь пора загрузить вас еще больше, - просто представьте что вам уже платят 200к и для того чтобы получить свои 10к в день вам просто надо решить одну алгоритмическую задачу: представили? А теперь поймите что в некоторых случаях это реальность: 

НЕДЕЛЯ АДА - 2-3 часа в день в течении недели подряд, можно две - делаем то что описано ниже

Начинайте решать задачи на ресурсе

https://leetcode.com/ - если тяжело найти решение, не обязательно покупать аккаунт премиум - на ютуб есть решения для некоторых задач, но вообще, основная ваша задача научиться решать задачи самостоятельно - не получается? Используйте Гугл и, наконец-то - можете попробовать использовать нейросети

Также начинайте читать книги ниже - они есть в бонусах (не смог найти русскоязыных аналогов бесплатных для некоторых из книг)

Eloquent JavaScript - пытаемся понять, если возникают сложности, не зацикливаться и не переживаем, очень сложная книжечка, но стоит попытаться ее понять
Javascript definitive guide - чтение каждый день по 10-15 минут (книга на русском - не забываем про ежедневный learn.javascript.ru)
HTTP definitive Guide на русском находим - либо читаем простой аналог от полноценного оригинала - https://proselyte.net/tutorials/http-tutorial/introduction/ - читаем, пытаемся понять и осознать, если не получается, не зацикливается, действуем спокойно

Книга - грокаем алгоритмы - пытаемся понять, если возникают сложности, не зацикливаться - но пока прямо вообще каша не встанет, не сдаваться, читать и пытаться понять

ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ
ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ
ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ

Начинаете искать работу - активно - по рекомендациям из третьего урока, если вы сделали все что я описывал выше в те же сроки - вы готовы, остается дожать - просто поймите - вы теперь реально можете программировать - все что отделяет вас от успеха, это тот факт оплаты вашей работы на новой сфере - на первой работе вы практически в любом случае начнете расти - бесплатная учеба кончится, теперь вам будут платить бабки, теперь вы залетаете в рынок ИТ и должны расти во что бы то ни стало - учиться, постоянно, чем больше тем лучше

ЧТО ДЕЛАТЬ?

Ищете работу по инструкциям из 3 урока и учите JS дальше, чтобы вы не расслаблялись - вам надо сделать тестовое задание в разделе - тестовое задание для закрепления JS - из папки - тестовое задание для закрепления JS (входит в бонусы). - сделать его надо на чистом JS! Никаких фреймворков, тем более вы еще и не изучали их еще.

Параллельно с тестовым заданием, за неделю вам надо изучить темы ниже и начать искать свою первую работу

НАЧАЛО ПОИСКА РАБОТЫ! Практически конец третьего месяца вашего пути становления frontend разработчиком

На тестовое задание и то что надо изучить ниже у вас полторы недели

Не углубляемся - смотрим видео ниже, повторяем, идем дальше
https://www.youtube.com/watch?v=WjxH7GODv6k
babel_basics

Максимум 5 часов на то чтобы погрузиться в тему ниже - если вы хотите понять что такое докер просто осознайте следующее
Докер - это программный софт благодаря которому можно запускать исходник питона, пхп или какой-нибудь СУБД, без установки этого ресурса на ваш компьютер. Схема следующая - требования для докера на несколько компьютеров одни и те же, а вот для какого-нибудь софта - они разные: а теперь представьте что нужно настроить окружение из пяти версий питона, нескольких СУБД и сделать так чтобы вся эта кухня работала у большого количества человек бесперебойно и при поломке, оперативно чинилась - для этого всю эту "кухню" запускают через докер и нанимают новых, современных "сис-админов" - то есть так называемых девопсов (это в очень общих чертах). 

Все - если вы поняли то что я написал выше и научились запускать докер на вашей машине, нашли "референс", то есть отсылку к базовым командам, - этого достаточно для новичка во frontend, даже более чем достаточно! Если вас спросят - с докером сталкивались, говорите да, на уровне запуска контейнеров. На практике вы вообще не должны касаться этого, но бывают исключения.

Docker
https://www.youtube.com/watch?v=dNS61T4MmlM&list=PL0lO_mIqDDFX1c0JHogP5YuZdOVawoepS&index=1

ЭТО НАИБОЛЕЕ ВАЖНЫЙ РАЗДЕЛ!
Пакетные менеджеры npm, yarn, pnpm
https://www.youtube.com/watch?v=FDfvuNbSs4U

ДОМАШНЕЕ ЗАДАНИЕ:

Научиться переключиться между npm версиями, при это не переустанавливая их раз за разом

Вглубь не копаем, просто расширяем кругозор. 
Шаблонизаторы, pug
https://www.youtube.com/watch?v=XemDmsmnYII

Базы данных, их виды, инструменты СУБД - тут повнимательнее, важно понимать зачем нужны эти инструменты, хоть и они большей части для бэкэнд разработчиков.

Что такое SQL - https://www.youtube.com/watch?v=bv5UqdWm-5k
Что такое NoSQL - https://www.youtube.com/watch?v=IBzTDkYNB7I
Типы баз данных - https://www.youtube.com/watch?v=oDS5CPyWhbU

Еще не нашли работу? У меня для вас есть еще задание: 

Нужно установить на свой компьютер Postgress, Mysql, Couch DB, а также Dbeaver

Напоминаю, что если вы испытываете трудности - нужно радоваться, значит вы на правильном пути - если же вам все легко и просто, замечательно: значит моя методика недостаточно крепкая.

Dbeaver - https://www.youtube.com/watch?v=8OYoPGH0BX0

ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ
ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ
ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ

ИТОГО - вы учитесь около 3 месяце - учитывая сроки выше: ЗАЧЕМ? Чтобы применять свои знания не выходя из дома - да, рано или поздно будет удаленная работа, такое возможно и наступит момент когда вы вообще не вспомните какого это ездить в какой-нибудь голимый офис и тратить время на дорогу туда и обратно, также наступит время когда вы вспомните этот период с доброй ностальгией, но это не точно

Никто не говорил что будет легко

Немного выдохните: вы уже Junior+, а если вы реально выполнили все что было сказано то вы Junior супер бл* мега плюс

ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ
ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ
ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ ДАЛЕЕ

Неделя отдыха и что-нибудь на подобии "css бирюлек"

Что такое API - просто гляньте - потом расскажу как изучить на практике и понять раз и навсегда - https://www.youtube.com/watch?v=vPVAYsc-U60

- Typescript

На материал ниже 3 дня - заземляемся, продолжаем искать работу - помните, что вы больше никогда не будите джуниором, однажды вы повысите свой Грейд и будите вспоминать эти дни с приятной улыбкой, дни когда вы преодолели себя, свои страхи и сомнения, дни когда вы РЕШИЛИ что победите

ХВАТИТ ВОДЫ! ИЗУЧАЙТЕ МАТЕРИАЛ - спокойствие и методичная система, действия по плану

1) https://www.youtube.com/watch?v=b598TqLzBb4
2) https://www.youtube.com/watch?v=PYWaUwjofJo
3) https://www.youtube.com/watch?v=V7hBejCH1HI&t=308s

Теперь настало время немного прикипеть... =)

Изучаем материал ниже - на все три видео 2 недели - начинаем с vue, потом react, потом angular

Vue - https://www.youtube.com/watch?v=XzLuMtDelGk&pp=ygUEdnVlIA%3D%3D
React - https://www.youtube.com/watch?v=GNrdg3PzpJQ&t=4633s
Angular - https://www.youtube.com/watch?v=3dHNOWTI7H8&t=3032s

Потом выбираете какой-нибудь из фреймворков и просто ищите учебные материалы по его изучению, что включает в себя
- видео на ютубе где человек делает какой-нибудь проект на выбранном вами фрэймворке + используя TypeScript + используя какой-либо сборщик проектов (если вы не знаете что такое сборщик проектов - самое время узнать это на теоретическом и минимально практическом уровне)

- Что такое webpack

теория
https://www.youtube.com/watch?v=mtzpmljnrGo

Vite
https://www.youtube.com/watch?v=UTBqqUgvVGI

- ДЕЛАТЬ ШАГИ НИЖЕ ТОЛЬКО ПОСЛЕ ТОГО КАК НАШЛИ ПЕРВУЮ РАБОТУ

И только на серьезе - также учитывая сроки

Изучаем основы синтаксиса языка Python: устанавливаем питон на компьютер, изучаем его основы и синтаксис - материалы находим самостоятельно
На дело выше - 6 часов максимум

Повторяем это видео - чтобы понять что такое backend фрэймворк - на примере FAST API - срок - один день
https://www.youtube.com/watch?v=mzyU7-Ums5s&list=PLeLN0qH0-mCVQKZ8-W1LhxDcVlWtTALCS&index=3

ДАЛЕЕ:

Параллельно с основной работой пытаемся освоить тему ниже

- Что такое webpack

практика
https://www.youtube.com/watch?v=acAH2_YT6bs&t=1s

Если все еще не нашли работу - продолжаем изучать css, js и фрэймворки - с акцентом на фреймворки, и, конечно, активно ищем работу